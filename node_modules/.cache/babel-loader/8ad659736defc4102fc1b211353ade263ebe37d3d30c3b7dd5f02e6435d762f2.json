{"ast":null,"code":"var _jsxFileName = \"/Users/rakeshchowdary/Documents/Foundations-Software-Engineering/team3-Gaanam-project/src/GetTopSong.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport playButton from './images/spotify.png';\nimport './css/GetTopSong.css';\nimport './css/PlayButton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetTopSong = ({\n  url\n}) => {\n  _s();\n  const [songData, setSongData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedSongs, setSelectedSongs] = useState([]);\n  useEffect(() => {\n    // fetch('https://13.59.32.217/topSong')\n    fetch(url).then(response => response.json()).then(data => {\n      setSongData(data);\n      setIsLoading(false);\n    }).catch(error => {\n      console.error('Error:', error);\n      setIsLoading(false);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this); // Replace this with your loading spinner\n  }\n  const handleAlertClick = () => {\n    // setDisplayNavSongs(false);\n    // setDisplayNavArtist(false);\n    fetch(`http://127.0.0.1:5000/addTracks/${sessionStorage.getItem('user_id')}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        playlist_id: '32SR2YzI56EFpKwHLHgjLU',\n        tracks: selectedSongs.join(',')\n      })\n    }).then(response => response.json()).then(data => console.log(data)).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  //   alert(`Selected songs: ${selectedSongs.join(', ')}`);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [songData && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Song Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Artist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: songData.map((song, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                borderRadius: '50%',\n                // makes the button circular\n                width: '30px',\n                // sets a fixed width\n                height: '30px',\n                // sets a fixed height\n                fontSize: '20px',\n                // adjusts the font size\n                fontFamily: 'Arial, sans-serif',\n                // sets the font\n                border: 'none',\n                // removes the default button border\n                backgroundColor: '#4CAF50',\n                // sets the background color\n                color: 'white',\n                // sets the font color\n                cursor: 'pointer',\n                // changes the cursor to a pointer when hovering over the button\n                display: 'flex',\n                // uses flexbox for centering\n                alignItems: 'center',\n                // centers vertically\n                justifyContent: 'center' // centers horizontally\n              },\n              onClick: e => {\n                if (selectedSongs.includes(song.id)) {\n                  setSelectedSongs(prev => prev.filter(id => id !== song.id));\n                } else {\n                  setSelectedSongs(prev => [...prev, song.id]);\n                }\n              },\n              children: selectedSongs.includes(song.id) ? '-' : '+'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"song-image\",\n              src: song.image,\n              alt: song.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: song.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: song.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"audio\", {\n              controls: true,\n              children: [/*#__PURE__*/_jsxDEV(\"source\", {\n                src: song.preview,\n                type: \"audio/mpeg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this), \"Your browser does not support the audio element.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `https://open.spotify.com/track/${song.id}`,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: playButton,\n                alt: \"Play\",\n                className: \"playButton\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        padding: '10px 20px',\n        // adjusts the size of the button\n        fontSize: '16px',\n        // adjusts the font size\n        fontFamily: 'Arial, sans-serif',\n        // sets the font\n        border: 'none',\n        // removes the default button border\n        backgroundColor: '#4CAF50',\n        // sets the background color\n        color: 'white',\n        // sets the font color\n        cursor: 'pointer',\n        // changes the cursor to a pointer when hovering over the button\n        borderRadius: '5px' // rounds the corners of the button\n      },\n      onClick: handleAlertClick,\n      children: \"Add Selected Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(GetTopSong, \"zVV4a9fyndmtWecupN81o5Ekz2I=\");\n_c = GetTopSong;\nexport default GetTopSong;\nvar _c;\n$RefreshReg$(_c, \"GetTopSong\");","map":{"version":3,"names":["React","useState","useEffect","playButton","jsxDEV","_jsxDEV","GetTopSong","url","_s","songData","setSongData","isLoading","setIsLoading","selectedSongs","setSelectedSongs","fetch","then","response","json","data","catch","error","console","className","fileName","_jsxFileName","lineNumber","columnNumber","handleAlertClick","sessionStorage","getItem","method","headers","body","JSON","stringify","playlist_id","tracks","join","log","children","map","song","index","style","borderRadius","width","height","fontSize","fontFamily","border","backgroundColor","color","cursor","display","alignItems","justifyContent","onClick","e","includes","id","prev","filter","src","image","alt","name","artist","controls","preview","type","href","target","rel","padding","_c","$RefreshReg$"],"sources":["/Users/rakeshchowdary/Documents/Foundations-Software-Engineering/team3-Gaanam-project/src/GetTopSong.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport playButton from './images/spotify.png';\nimport './css/GetTopSong.css';\nimport './css/PlayButton.css';\n\nconst GetTopSong = ({url}) => {\n  const [songData, setSongData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedSongs, setSelectedSongs] = useState([]);\n\n  useEffect(() => {\n    // fetch('https://13.59.32.217/topSong')\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {setSongData(data);setIsLoading(false);})\n      .catch(error => {console.error('Error:', error);setIsLoading(false);});\n  }, []);\n\n  if (isLoading) {\n    return <div className='spinner'></div>; // Replace this with your loading spinner\n  }\n\n  const handleAlertClick = () => {\n      // setDisplayNavSongs(false);\n      // setDisplayNavArtist(false);\n      fetch(`http://127.0.0.1:5000/addTracks/${sessionStorage.getItem('user_id')}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          playlist_id: '32SR2YzI56EFpKwHLHgjLU',\n          tracks: selectedSongs.join(',')\n        }),\n      })\n      .then(response => response.json())\n      .then(data => console.log(data))\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n    };\n  //   alert(`Selected songs: ${selectedSongs.join(', ')}`);\n  // };\n  \n\n  return (\n    <div>\n    {/* <nav>\n        <button onClick={handleClick}>Get Top Songs</button>\n    </nav> */}\n     \n      {songData && (\n        <table>\n          <thead>\n            <tr>\n              <th> </th>\n              <th>Image</th>\n              <th>Song Name</th>\n              <th>Artist</th>\n              <th>Preview</th>\n              <th>Play</th>\n            </tr>\n          </thead>\n          <tbody>\n            {songData.map((song, index) => (\n              <tr key={index}>\n                <td>\n                <button\n                   style={{\n                    borderRadius: '50%', // makes the button circular\n                    width: '30px', // sets a fixed width\n                    height: '30px', // sets a fixed height\n                    fontSize: '20px', // adjusts the font size\n                    fontFamily: 'Arial, sans-serif', // sets the font\n                    border: 'none', // removes the default button border\n                    backgroundColor: '#4CAF50', // sets the background color\n                    color: 'white', // sets the font color\n                    cursor: 'pointer', // changes the cursor to a pointer when hovering over the button\n                    display: 'flex', // uses flexbox for centering\n                    alignItems: 'center', // centers vertically\n                    justifyContent: 'center', // centers horizontally\n                  }}\n                    onClick={(e) => {\n                      if (selectedSongs.includes(song.id)) {\n                        setSelectedSongs((prev) => prev.filter((id) => id !== song.id));\n                      } else {\n                        setSelectedSongs((prev) => [...prev, song.id]);\n                      }\n                    }}\n                  >\n                    {selectedSongs.includes(song.id) ? '-' : '+'}\n                </button>\n                </td>\n                <td><img className=\"song-image\" src={song.image} alt={song.name} /></td>\n                <td>{song.name}</td>\n                <td>{song.artist}</td>\n                <td>\n                  <audio controls>\n                    <source src={song.preview} type=\"audio/mpeg\" />\n                    Your browser does not support the audio element.\n                  </audio>\n                </td>\n                <td><a href={`https://open.spotify.com/track/${song.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <img src={playButton} alt=\"Play\" className='playButton'/>\n                    </a>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>   \n      )}\n      <button\n        style={{\n          padding: '10px 20px', // adjusts the size of the button\n          fontSize: '16px', // adjusts the font size\n          fontFamily: 'Arial, sans-serif', // sets the font\n          border: 'none', // removes the default button border\n          backgroundColor: '#4CAF50', // sets the background color\n          color: 'white', // sets the font color\n          cursor: 'pointer', // changes the cursor to a pointer when hovering over the button\n          borderRadius: '5px', // rounds the corners of the button\n        }}\n        onClick={handleAlertClick}\n      >\n        Add Selected Songs\n      </button>\n    </div>\n  );\n};\n\nexport default GetTopSong;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}